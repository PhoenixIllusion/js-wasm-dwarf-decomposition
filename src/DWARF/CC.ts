// https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/BinaryFormat/Dwarf.def
// DWARF calling convention codes.
export const DW_CC = {
  DW_CC_normal: 0x01,
  DW_CC_program: 0x02,
  DW_CC_nocall: 0x03,
  // New in DWARF v5:
  DW_CC_pass_by_reference: 0x04,
  DW_CC_pass_by_value: 0x05,
  // Vendor extensions:
  DW_CC_GNU_renesas_sh: 0x40,
  DW_CC_GNU_borland_fastcall_i386: 0x41,
  DW_CC_BORLAND_safecall: 0xb0,
  DW_CC_BORLAND_stdcall: 0xb1,
  DW_CC_BORLAND_pascal: 0xb2,
  DW_CC_BORLAND_msfastcall: 0xb3,
  DW_CC_BORLAND_msreturn: 0xb4,
  DW_CC_BORLAND_thiscall: 0xb5,
  DW_CC_BORLAND_fastcall: 0xb6,
  DW_CC_LLVM_vectorcall: 0xc0,
  DW_CC_LLVM_Win64: 0xc1,
  DW_CC_LLVM_X86_64SysV: 0xc2,
  DW_CC_LLVM_AAPCS: 0xc3,
  DW_CC_LLVM_AAPCS_VFP: 0xc4,
  DW_CC_LLVM_IntelOclBicc: 0xc5,
  DW_CC_LLVM_SpirFunction: 0xc6,
  DW_CC_LLVM_OpenCLKernel: 0xc7,
  DW_CC_LLVM_Swift: 0xc8,
  DW_CC_LLVM_PreserveMost: 0xc9,
  DW_CC_LLVM_PreserveAll: 0xca,
  DW_CC_LLVM_X86RegCall: 0xcb,
  DW_CC_LLVM_M68kRTD: 0xcc,
  DW_CC_LLVM_PreserveNone: 0xcd,
  // From GCC source code (include/dwarf2.h): This DW_CC_ value is not currently
  // generated by any toolchain.  It is used internally to GDB to indicate OpenCL
  // C functions that have been compiled with the IBM XL C for OpenCL compiler and
  // use a non-platform calling convention for passing OpenCL C vector types.
  DW_CC_GDB_IBM_OpenCL: 0xff,
  DW_CC_lo_user: 0x40,
  DW_CC_hi_user: 0xff
}

export type DW_CC_KEY = keyof typeof DW_CC;