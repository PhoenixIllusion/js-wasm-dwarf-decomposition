import { Reader } from "../../../reader.js";
import { OP_Command, wrap, wrap_op } from "../index.js";

export const OP_Atomics = {
  'memory.atomic.notify': 0x00,
  'memory.atomic.wait32': 0x01,
  'memory.atomic.wait64': 0x02,
  'atomic.fence': 0x03,
  'i32.atomic.load': 0x10,
  'i64.atomic.load': 0x11,
  'i32.atomic.load8_u': 0x12,
  'i32.atomic.load16_u': 0x13,
  'i64.atomic.load8_u': 0x14,
  'i64.atomic.load16_u': 0x15,
  'i64.atomic.load32_u': 0x16,
  'i32.atomic.store': 0x17,
  'i64.atomic.store': 0x18,
  'i32.atomic.store8': 0x19,
  'i32.atomic.store16': 0x1A,
  'i64.atomic.store8': 0x1B,
  'i64.atomic.store16': 0x1C,
  'i64.atomic.store32': 0x1D,
  'i32.atomic.rmw.add': 0x1E,
  'i64.atomic.rmw.add': 0x1F,
  'i32.atomic.rmw8.add_u': 0x20,
  'i32.atomic.rmw16.add_u': 0x21,
  'i64.atomic.rmw8.add_u': 0x22,
  'i64.atomic.rmw16.add_u': 0x23,
  'i64.atomic.rmw32.add_u': 0x24,
  'i32.atomic.rmw.sub': 0x25,
  'i64.atomic.rmw.sub': 0x26,
  'i32.atomic.rmw8.sub_u': 0x27,
  'i32.atomic.rmw16.sub_u': 0x28,
  'i64.atomic.rmw8.sub_u': 0x29,
  'i64.atomic.rmw16.sub_u': 0x2A,
  'i64.atomic.rmw32.sub_u': 0x2B,
  'i32.atomic.rmw.and': 0x2C,
  'i64.atomic.rmw.and': 0x2D,
  'i32.atomic.rmw8.and_u': 0x2E,
  'i32.atomic.rmw16.and_u': 0x2F,
  'i64.atomic.rmw8.and_u': 0x30,
  'i64.atomic.rmw16.and_u': 0x31,
  'i64.atomic.rmw32.and_u': 0x32,
  'i32.atomic.rmw.or': 0x33,
  'i64.atomic.rmw.or': 0x34,
  'i32.atomic.rmw8.or_u': 0x35,
  'i32.atomic.rmw16.or_u': 0x36,
  'i64.atomic.rmw8.or_u': 0x37,
  'i64.atomic.rmw16.or_u': 0x38,
  'i64.atomic.rmw32.or_u': 0x39,
  'i32.atomic.rmw.xor': 0x3A,
  'i64.atomic.rmw.xor': 0x3B,
  'i32.atomic.rmw8.xor_u': 0x3C,
  'i32.atomic.rmw16.xor_u': 0x3D,
  'i64.atomic.rmw8.xor_u': 0x3E,
  'i64.atomic.rmw16.xor_u': 0x3F,
  'i64.atomic.rmw32.xor_u': 0x40,
  'i32.atomic.rmw.xchg': 0x41,
  'i64.atomic.rmw.xchg': 0x42,
  'i32.atomic.rmw8.xchg_u': 0x43,
  'i32.atomic.rmw16.xchg_u': 0x44,
  'i64.atomic.rmw8.xchg_u': 0x45,
  'i64.atomic.rmw16.xchg_u': 0x46,
  'i64.atomic.rmw32.xchg_u': 0x47,
  'i32.atomic.rmw.cmpxchg': 0x48,
  'i64.atomic.rmw.cmpxchg': 0x49,
  'i32.atomic.rmw8.cmpxchg_u': 0x4A,
  'i32.atomic.rmw16.cmpxchg_u': 0x4B,
  'i64.atomic.rmw8.cmpxchg_u': 0x4C,
  'i64.atomic.rmw16.cmpxchg_u': 0x4D,
  'i64.atomic.rmw32.cmpxchg_u': 0x4E,
}
export const ATOMICS = wrap(OP_Atomics);

export function parse_atomics(code: number, reader: Reader): OP_Command {
  return wrap_op(code, reader, ATOMICS, immediates => {
      if(code == 0x03) // fence has extra param
        immediates.push(reader.getULEB128());
  });
}